@startuml Blackjack
class Suit {
        __init__()
}
class Rank {
        __init__()
}
class Card {
    get_point()
    __eq__()
    __str__()
        suit : Suit 
    rank : Rank 
    point
    __init__(suit: Suit , rank: Rank )
}
Enum <|-- Suit
Enum <|-- Rank
object <|-- Card
Card --> Suit
Card --> Rank

class Deck {
    shuffle()
    burn_out()
    deal_card()
    __str__()
    __len__()
        __init__()
}
object <|-- Deck

class Hand {
    add_card()
    __evalue()
    __potential_evalue()
    points()
    potiential_points()
    is_blackjack()
    is_bust()
    __str__()
    __eq__()
        is_soft
    cards
    is_soft
    __init__()
}
class PlayerHand {
    bet()
    is_initial()
    is_initial()
    doubled()
    add_bet()
    mark_as_doubled()
    has_pair()
    split()
        __bet
    __doubled
    __is_initial
    __is_initial
    __doubled
    __init__()
}
object <|-- Hand
Hand <|-- PlayerHand

class Player {
    init_hand()
    get_bank_amount()
    get_insurance_amount()
    has_pair()
    stand()
    hit()
    double()
    can_double()
    split()
    insurance()
    __move_to_nex_hand()
    done_with_hand()
    is_all_done()
    get_hand()
    get_bet()
    get_all_hands()
    get_insurance_rate()
    get_all_bets()
    get_bank_and_bets()
    pay_out()
    __reset()
    __str__()
    __id
    __bank
    __hand
    __insuranced
    __main_bet
    __init__()
}
object <|-- Player

class Dealer {
    __add_hiden_back()
    init_hand()
    hits()
    is_blackjack()
    reveal_hand()
    get_face_point()
    get_face_card()
    get_hand()
    is_bust()
    reset()
    get_hiden_card()
    __get_hand_length()
    __str__()
        __hiden_card
    __hand
    __hiden_card
    __hand
    __hiden_card
    __init__()
}
object <|-- Dealer

class Action {
    cash_in_chips()
    get_init_bet()
    get_action()
        __init__()
}
class State {
    __str__()
        __dealer_hand : Hand 
    __player_hand : PlayerHand 
    __init__(__dealer_hand: Hand , __player_hand: PlayerHand )
}
class BlackJackGame {
    __init_player()
    __init_hands()
    _get_state()
    _print_final_state()
    _get_possible_actions()
    _get_insurance_reward()
    _get_hand_reward()
    step()
    round()
    play()
    reset()
    deck
    dealer
    player
    __can_insure
    __init__(__can_insure: bool , __can_insure: bool )
}
Enum <|-- Action
object <|-- State
State --> Hand
State --> PlayerHand
object <|-- BlackJackGame
@enduml